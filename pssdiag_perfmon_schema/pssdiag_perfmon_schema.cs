/**************************************************
beginning of licensing agreement
Microsoft Public License (Ms-PL)

This license governs use of the accompanying software. If you use the software, you accept this license. If you do not accept the license, do not use the software.

1. Definitions

The terms "reproduce," "reproduction," "derivative works," and "distribution" have the same meaning here as under U.S. copyright law.

A "contribution" is the original software, or any additions or changes to the software.

A "contributor" is any person that distributes its contribution under this license.

"Licensed patents" are a contributor's patent claims that read directly on its contribution.

2. Grant of Rights

(A) Copyright Grant- Subject to the terms of this license, including the license conditions and limitations in section 3, each contributor grants you a non-exclusive, worldwide, royalty-free copyright license to reproduce its contribution, prepare derivative works of its contribution, and distribute its contribution or any derivative works that you create.

(B) Patent Grant- Subject to the terms of this license, including the license conditions and limitations in section 3, each contributor grants you a non-exclusive, worldwide, royalty-free license under its licensed patents to make, have made, use, sell, offer for sale, import, and/or otherwise dispose of its contribution in the software or derivative works of the contribution in the software.

3. Conditions and Limitations

(A) No Trademark License- This license does not grant you rights to use any contributors' name, logo, or trademarks.

(B) If you bring a patent claim against any contributor over patents that you claim are infringed by the software, your patent license from such contributor to the software ends automatically.

(C) If you distribute any portion of the software, you must retain all copyright, patent, trademark, and attribution notices that are present in the software.

(D) If you distribute any portion of the software in source code form, you may do so only under this license by including a complete copy of this license with your distribution. If you distribute any portion of the software in compiled or object code form, you may only do so under a license that complies with this license.

(E) The software is licensed "as-is." You bear the risk of using it. The contributors give no express warranties, guarantees or conditions. You may have additional consumer rights under your local laws which this license cannot change. To the extent permitted under your local laws, the contributors exclude the implied warranties of merchantability, fitness for a particular purpose and non-infringement. 
end of licensing agreement
**************************************************/
//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2032
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by xsd, Version=1.1.4322.2032.
// 
namespace PssdiagPerfmonSchema.Namespace {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class dsPerfmon : DataSet {
        
        private PerfmonCollectorDataTable tablePerfmonCollector;
        
        private PerfmonCountersDataTable tablePerfmonCounters;
        
        private PerfmonObjectDataTable tablePerfmonObject;
        
        private PerfmonCounterDataTable tablePerfmonCounter;
        
        private DataRelation relationPerfmonObject_PerfmonCounter;
        
        private DataRelation relationPerfmonCounters_PerfmonObject;
        
        private DataRelation relationPerfmonCollector_PerfmonCounters;
        
        public dsPerfmon() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected dsPerfmon(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["PerfmonCollector"] != null)) {
                    this.Tables.Add(new PerfmonCollectorDataTable(ds.Tables["PerfmonCollector"]));
                }
                if ((ds.Tables["PerfmonCounters"] != null)) {
                    this.Tables.Add(new PerfmonCountersDataTable(ds.Tables["PerfmonCounters"]));
                }
                if ((ds.Tables["PerfmonObject"] != null)) {
                    this.Tables.Add(new PerfmonObjectDataTable(ds.Tables["PerfmonObject"]));
                }
                if ((ds.Tables["PerfmonCounter"] != null)) {
                    this.Tables.Add(new PerfmonCounterDataTable(ds.Tables["PerfmonCounter"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PerfmonCollectorDataTable PerfmonCollector {
            get {
                return this.tablePerfmonCollector;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PerfmonCountersDataTable PerfmonCounters {
            get {
                return this.tablePerfmonCounters;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PerfmonObjectDataTable PerfmonObject {
            get {
                return this.tablePerfmonObject;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PerfmonCounterDataTable PerfmonCounter {
            get {
                return this.tablePerfmonCounter;
            }
        }
        
        public override DataSet Clone() {
            dsPerfmon cln = ((dsPerfmon)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["PerfmonCollector"] != null)) {
                this.Tables.Add(new PerfmonCollectorDataTable(ds.Tables["PerfmonCollector"]));
            }
            if ((ds.Tables["PerfmonCounters"] != null)) {
                this.Tables.Add(new PerfmonCountersDataTable(ds.Tables["PerfmonCounters"]));
            }
            if ((ds.Tables["PerfmonObject"] != null)) {
                this.Tables.Add(new PerfmonObjectDataTable(ds.Tables["PerfmonObject"]));
            }
            if ((ds.Tables["PerfmonCounter"] != null)) {
                this.Tables.Add(new PerfmonCounterDataTable(ds.Tables["PerfmonCounter"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tablePerfmonCollector = ((PerfmonCollectorDataTable)(this.Tables["PerfmonCollector"]));
            if ((this.tablePerfmonCollector != null)) {
                this.tablePerfmonCollector.InitVars();
            }
            this.tablePerfmonCounters = ((PerfmonCountersDataTable)(this.Tables["PerfmonCounters"]));
            if ((this.tablePerfmonCounters != null)) {
                this.tablePerfmonCounters.InitVars();
            }
            this.tablePerfmonObject = ((PerfmonObjectDataTable)(this.Tables["PerfmonObject"]));
            if ((this.tablePerfmonObject != null)) {
                this.tablePerfmonObject.InitVars();
            }
            this.tablePerfmonCounter = ((PerfmonCounterDataTable)(this.Tables["PerfmonCounter"]));
            if ((this.tablePerfmonCounter != null)) {
                this.tablePerfmonCounter.InitVars();
            }
            this.relationPerfmonObject_PerfmonCounter = this.Relations["PerfmonObject_PerfmonCounter"];
            this.relationPerfmonCounters_PerfmonObject = this.Relations["PerfmonCounters_PerfmonObject"];
            this.relationPerfmonCollector_PerfmonCounters = this.Relations["PerfmonCollector_PerfmonCounters"];
        }
        
        private void InitClass() {
            this.DataSetName = "dsPerfmon";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/pssdiag_perfmon_schema.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = false;
            this.tablePerfmonCollector = new PerfmonCollectorDataTable();
            this.Tables.Add(this.tablePerfmonCollector);
            this.tablePerfmonCounters = new PerfmonCountersDataTable();
            this.Tables.Add(this.tablePerfmonCounters);
            this.tablePerfmonObject = new PerfmonObjectDataTable();
            this.Tables.Add(this.tablePerfmonObject);
            this.tablePerfmonCounter = new PerfmonCounterDataTable();
            this.Tables.Add(this.tablePerfmonCounter);
            ForeignKeyConstraint fkc;
            fkc = new ForeignKeyConstraint("PerfmonCollector_PerfmonCounters", new DataColumn[] {
                        this.tablePerfmonCollector.PerfmonCollector_IdColumn}, new DataColumn[] {
                        this.tablePerfmonCounters.PerfmonCollector_IdColumn});
            this.tablePerfmonCounters.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("PerfmonCounters_PerfmonObject", new DataColumn[] {
                        this.tablePerfmonCounters.PerfmonCounters_IdColumn}, new DataColumn[] {
                        this.tablePerfmonObject.PerfmonCounters_IdColumn});
            this.tablePerfmonObject.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("PerfmonObject_PerfmonCounter", new DataColumn[] {
                        this.tablePerfmonObject.PerfmonObject_IdColumn}, new DataColumn[] {
                        this.tablePerfmonCounter.PerfmonObject_IdColumn});
            this.tablePerfmonCounter.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            this.relationPerfmonObject_PerfmonCounter = new DataRelation("PerfmonObject_PerfmonCounter", new DataColumn[] {
                        this.tablePerfmonObject.PerfmonObject_IdColumn}, new DataColumn[] {
                        this.tablePerfmonCounter.PerfmonObject_IdColumn}, false);
            this.relationPerfmonObject_PerfmonCounter.Nested = true;
            this.Relations.Add(this.relationPerfmonObject_PerfmonCounter);
            this.relationPerfmonCounters_PerfmonObject = new DataRelation("PerfmonCounters_PerfmonObject", new DataColumn[] {
                        this.tablePerfmonCounters.PerfmonCounters_IdColumn}, new DataColumn[] {
                        this.tablePerfmonObject.PerfmonCounters_IdColumn}, false);
            this.relationPerfmonCounters_PerfmonObject.Nested = true;
            this.Relations.Add(this.relationPerfmonCounters_PerfmonObject);
            this.relationPerfmonCollector_PerfmonCounters = new DataRelation("PerfmonCollector_PerfmonCounters", new DataColumn[] {
                        this.tablePerfmonCollector.PerfmonCollector_IdColumn}, new DataColumn[] {
                        this.tablePerfmonCounters.PerfmonCollector_IdColumn}, false);
            this.relationPerfmonCollector_PerfmonCounters.Nested = true;
            this.Relations.Add(this.relationPerfmonCollector_PerfmonCounters);
        }
        
        private bool ShouldSerializePerfmonCollector() {
            return false;
        }
        
        private bool ShouldSerializePerfmonCounters() {
            return false;
        }
        
        private bool ShouldSerializePerfmonObject() {
            return false;
        }
        
        private bool ShouldSerializePerfmonCounter() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void PerfmonCollectorRowChangeEventHandler(object sender, PerfmonCollectorRowChangeEvent e);
        
        public delegate void PerfmonCountersRowChangeEventHandler(object sender, PerfmonCountersRowChangeEvent e);
        
        public delegate void PerfmonObjectRowChangeEventHandler(object sender, PerfmonObjectRowChangeEvent e);
        
        public delegate void PerfmonCounterRowChangeEventHandler(object sender, PerfmonCounterRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class PerfmonCollectorDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnPerfmonCollector_Id;
            
            internal PerfmonCollectorDataTable() : 
                    base("PerfmonCollector") {
                this.InitClass();
            }
            
            internal PerfmonCollectorDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn PerfmonCollector_IdColumn {
                get {
                    return this.columnPerfmonCollector_Id;
                }
            }
            
            public PerfmonCollectorRow this[int index] {
                get {
                    return ((PerfmonCollectorRow)(this.Rows[index]));
                }
            }
            
            public event PerfmonCollectorRowChangeEventHandler PerfmonCollectorRowChanged;
            
            public event PerfmonCollectorRowChangeEventHandler PerfmonCollectorRowChanging;
            
            public event PerfmonCollectorRowChangeEventHandler PerfmonCollectorRowDeleted;
            
            public event PerfmonCollectorRowChangeEventHandler PerfmonCollectorRowDeleting;
            
            public void AddPerfmonCollectorRow(PerfmonCollectorRow row) {
                this.Rows.Add(row);
            }
            
            public PerfmonCollectorRow AddPerfmonCollectorRow() {
                PerfmonCollectorRow rowPerfmonCollectorRow = ((PerfmonCollectorRow)(this.NewRow()));
                rowPerfmonCollectorRow.ItemArray = new object[] {
                        null};
                this.Rows.Add(rowPerfmonCollectorRow);
                return rowPerfmonCollectorRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                PerfmonCollectorDataTable cln = ((PerfmonCollectorDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new PerfmonCollectorDataTable();
            }
            
            internal void InitVars() {
                this.columnPerfmonCollector_Id = this.Columns["PerfmonCollector_Id"];
            }
            
            private void InitClass() {
                this.columnPerfmonCollector_Id = new DataColumn("PerfmonCollector_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnPerfmonCollector_Id);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnPerfmonCollector_Id}, true));
                this.columnPerfmonCollector_Id.AutoIncrement = true;
                this.columnPerfmonCollector_Id.AllowDBNull = false;
                this.columnPerfmonCollector_Id.Unique = true;
            }
            
            public PerfmonCollectorRow NewPerfmonCollectorRow() {
                return ((PerfmonCollectorRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new PerfmonCollectorRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(PerfmonCollectorRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PerfmonCollectorRowChanged != null)) {
                    this.PerfmonCollectorRowChanged(this, new PerfmonCollectorRowChangeEvent(((PerfmonCollectorRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PerfmonCollectorRowChanging != null)) {
                    this.PerfmonCollectorRowChanging(this, new PerfmonCollectorRowChangeEvent(((PerfmonCollectorRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PerfmonCollectorRowDeleted != null)) {
                    this.PerfmonCollectorRowDeleted(this, new PerfmonCollectorRowChangeEvent(((PerfmonCollectorRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PerfmonCollectorRowDeleting != null)) {
                    this.PerfmonCollectorRowDeleting(this, new PerfmonCollectorRowChangeEvent(((PerfmonCollectorRow)(e.Row)), e.Action));
                }
            }
            
            public void RemovePerfmonCollectorRow(PerfmonCollectorRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class PerfmonCollectorRow : DataRow {
            
            private PerfmonCollectorDataTable tablePerfmonCollector;
            
            internal PerfmonCollectorRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tablePerfmonCollector = ((PerfmonCollectorDataTable)(this.Table));
            }
            
            public PerfmonCountersRow[] GetPerfmonCountersRows() {
                return ((PerfmonCountersRow[])(this.GetChildRows(this.Table.ChildRelations["PerfmonCollector_PerfmonCounters"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class PerfmonCollectorRowChangeEvent : EventArgs {
            
            private PerfmonCollectorRow eventRow;
            
            private DataRowAction eventAction;
            
            public PerfmonCollectorRowChangeEvent(PerfmonCollectorRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public PerfmonCollectorRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class PerfmonCountersDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnPerfmonCounters_Id;
            
            private DataColumn columnPerfmonCollector_Id;
            
            internal PerfmonCountersDataTable() : 
                    base("PerfmonCounters") {
                this.InitClass();
            }
            
            internal PerfmonCountersDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn PerfmonCounters_IdColumn {
                get {
                    return this.columnPerfmonCounters_Id;
                }
            }
            
            internal DataColumn PerfmonCollector_IdColumn {
                get {
                    return this.columnPerfmonCollector_Id;
                }
            }
            
            public PerfmonCountersRow this[int index] {
                get {
                    return ((PerfmonCountersRow)(this.Rows[index]));
                }
            }
            
            public event PerfmonCountersRowChangeEventHandler PerfmonCountersRowChanged;
            
            public event PerfmonCountersRowChangeEventHandler PerfmonCountersRowChanging;
            
            public event PerfmonCountersRowChangeEventHandler PerfmonCountersRowDeleted;
            
            public event PerfmonCountersRowChangeEventHandler PerfmonCountersRowDeleting;
            
            public void AddPerfmonCountersRow(PerfmonCountersRow row) {
                this.Rows.Add(row);
            }
            
            public PerfmonCountersRow AddPerfmonCountersRow(PerfmonCollectorRow parentPerfmonCollectorRowByPerfmonCollector_PerfmonCounters) {
                PerfmonCountersRow rowPerfmonCountersRow = ((PerfmonCountersRow)(this.NewRow()));
                rowPerfmonCountersRow.ItemArray = new object[] {
                        null,
                        parentPerfmonCollectorRowByPerfmonCollector_PerfmonCounters[0]};
                this.Rows.Add(rowPerfmonCountersRow);
                return rowPerfmonCountersRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                PerfmonCountersDataTable cln = ((PerfmonCountersDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new PerfmonCountersDataTable();
            }
            
            internal void InitVars() {
                this.columnPerfmonCounters_Id = this.Columns["PerfmonCounters_Id"];
                this.columnPerfmonCollector_Id = this.Columns["PerfmonCollector_Id"];
            }
            
            private void InitClass() {
                this.columnPerfmonCounters_Id = new DataColumn("PerfmonCounters_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnPerfmonCounters_Id);
                this.columnPerfmonCollector_Id = new DataColumn("PerfmonCollector_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnPerfmonCollector_Id);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnPerfmonCounters_Id}, true));
                this.columnPerfmonCounters_Id.AutoIncrement = true;
                this.columnPerfmonCounters_Id.AllowDBNull = false;
                this.columnPerfmonCounters_Id.Unique = true;
            }
            
            public PerfmonCountersRow NewPerfmonCountersRow() {
                return ((PerfmonCountersRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new PerfmonCountersRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(PerfmonCountersRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PerfmonCountersRowChanged != null)) {
                    this.PerfmonCountersRowChanged(this, new PerfmonCountersRowChangeEvent(((PerfmonCountersRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PerfmonCountersRowChanging != null)) {
                    this.PerfmonCountersRowChanging(this, new PerfmonCountersRowChangeEvent(((PerfmonCountersRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PerfmonCountersRowDeleted != null)) {
                    this.PerfmonCountersRowDeleted(this, new PerfmonCountersRowChangeEvent(((PerfmonCountersRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PerfmonCountersRowDeleting != null)) {
                    this.PerfmonCountersRowDeleting(this, new PerfmonCountersRowChangeEvent(((PerfmonCountersRow)(e.Row)), e.Action));
                }
            }
            
            public void RemovePerfmonCountersRow(PerfmonCountersRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class PerfmonCountersRow : DataRow {
            
            private PerfmonCountersDataTable tablePerfmonCounters;
            
            internal PerfmonCountersRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tablePerfmonCounters = ((PerfmonCountersDataTable)(this.Table));
            }
            
            public PerfmonCollectorRow PerfmonCollectorRow {
                get {
                    return ((PerfmonCollectorRow)(this.GetParentRow(this.Table.ParentRelations["PerfmonCollector_PerfmonCounters"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["PerfmonCollector_PerfmonCounters"]);
                }
            }
            
            public PerfmonObjectRow[] GetPerfmonObjectRows() {
                return ((PerfmonObjectRow[])(this.GetChildRows(this.Table.ChildRelations["PerfmonCounters_PerfmonObject"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class PerfmonCountersRowChangeEvent : EventArgs {
            
            private PerfmonCountersRow eventRow;
            
            private DataRowAction eventAction;
            
            public PerfmonCountersRowChangeEvent(PerfmonCountersRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public PerfmonCountersRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class PerfmonObjectDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnenabled;
            
            private DataColumn columnname;
            
            private DataColumn columnPerfmonObject_Id;
            
            private DataColumn columnPerfmonCounters_Id;
            
            internal PerfmonObjectDataTable() : 
                    base("PerfmonObject") {
                this.InitClass();
            }
            
            internal PerfmonObjectDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn enabledColumn {
                get {
                    return this.columnenabled;
                }
            }
            
            internal DataColumn nameColumn {
                get {
                    return this.columnname;
                }
            }
            
            internal DataColumn PerfmonObject_IdColumn {
                get {
                    return this.columnPerfmonObject_Id;
                }
            }
            
            internal DataColumn PerfmonCounters_IdColumn {
                get {
                    return this.columnPerfmonCounters_Id;
                }
            }
            
            public PerfmonObjectRow this[int index] {
                get {
                    return ((PerfmonObjectRow)(this.Rows[index]));
                }
            }
            
            public event PerfmonObjectRowChangeEventHandler PerfmonObjectRowChanged;
            
            public event PerfmonObjectRowChangeEventHandler PerfmonObjectRowChanging;
            
            public event PerfmonObjectRowChangeEventHandler PerfmonObjectRowDeleted;
            
            public event PerfmonObjectRowChangeEventHandler PerfmonObjectRowDeleting;
            
            public void AddPerfmonObjectRow(PerfmonObjectRow row) {
                this.Rows.Add(row);
            }
            
            public PerfmonObjectRow AddPerfmonObjectRow(bool enabled, string name, PerfmonCountersRow parentPerfmonCountersRowByPerfmonCounters_PerfmonObject) {
                PerfmonObjectRow rowPerfmonObjectRow = ((PerfmonObjectRow)(this.NewRow()));
                rowPerfmonObjectRow.ItemArray = new object[] {
                        enabled,
                        name,
                        null,
                        parentPerfmonCountersRowByPerfmonCounters_PerfmonObject[0]};
                this.Rows.Add(rowPerfmonObjectRow);
                return rowPerfmonObjectRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                PerfmonObjectDataTable cln = ((PerfmonObjectDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new PerfmonObjectDataTable();
            }
            
            internal void InitVars() {
                this.columnenabled = this.Columns["enabled"];
                this.columnname = this.Columns["name"];
                this.columnPerfmonObject_Id = this.Columns["PerfmonObject_Id"];
                this.columnPerfmonCounters_Id = this.Columns["PerfmonCounters_Id"];
            }
            
            private void InitClass() {
                this.columnenabled = new DataColumn("enabled", typeof(bool), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnenabled);
                this.columnname = new DataColumn("name", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnname);
                this.columnPerfmonObject_Id = new DataColumn("PerfmonObject_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnPerfmonObject_Id);
                this.columnPerfmonCounters_Id = new DataColumn("PerfmonCounters_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnPerfmonCounters_Id);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnPerfmonObject_Id}, true));
                this.columnenabled.Namespace = "";
                this.columnname.Namespace = "";
                this.columnPerfmonObject_Id.AutoIncrement = true;
                this.columnPerfmonObject_Id.AllowDBNull = false;
                this.columnPerfmonObject_Id.Unique = true;
            }
            
            public PerfmonObjectRow NewPerfmonObjectRow() {
                return ((PerfmonObjectRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new PerfmonObjectRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(PerfmonObjectRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PerfmonObjectRowChanged != null)) {
                    this.PerfmonObjectRowChanged(this, new PerfmonObjectRowChangeEvent(((PerfmonObjectRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PerfmonObjectRowChanging != null)) {
                    this.PerfmonObjectRowChanging(this, new PerfmonObjectRowChangeEvent(((PerfmonObjectRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PerfmonObjectRowDeleted != null)) {
                    this.PerfmonObjectRowDeleted(this, new PerfmonObjectRowChangeEvent(((PerfmonObjectRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PerfmonObjectRowDeleting != null)) {
                    this.PerfmonObjectRowDeleting(this, new PerfmonObjectRowChangeEvent(((PerfmonObjectRow)(e.Row)), e.Action));
                }
            }
            
            public void RemovePerfmonObjectRow(PerfmonObjectRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class PerfmonObjectRow : DataRow {
            
            private PerfmonObjectDataTable tablePerfmonObject;
            
            internal PerfmonObjectRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tablePerfmonObject = ((PerfmonObjectDataTable)(this.Table));
            }
            
            public bool enabled {
                get {
                    try {
                        return ((bool)(this[this.tablePerfmonObject.enabledColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePerfmonObject.enabledColumn] = value;
                }
            }
            
            public string name {
                get {
                    try {
                        return ((string)(this[this.tablePerfmonObject.nameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePerfmonObject.nameColumn] = value;
                }
            }
            
            public PerfmonCountersRow PerfmonCountersRow {
                get {
                    return ((PerfmonCountersRow)(this.GetParentRow(this.Table.ParentRelations["PerfmonCounters_PerfmonObject"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["PerfmonCounters_PerfmonObject"]);
                }
            }
            
            public bool IsenabledNull() {
                return this.IsNull(this.tablePerfmonObject.enabledColumn);
            }
            
            public void SetenabledNull() {
                this[this.tablePerfmonObject.enabledColumn] = System.Convert.DBNull;
            }
            
            public bool IsnameNull() {
                return this.IsNull(this.tablePerfmonObject.nameColumn);
            }
            
            public void SetnameNull() {
                this[this.tablePerfmonObject.nameColumn] = System.Convert.DBNull;
            }
            
            public PerfmonCounterRow[] GetPerfmonCounterRows() {
                return ((PerfmonCounterRow[])(this.GetChildRows(this.Table.ChildRelations["PerfmonObject_PerfmonCounter"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class PerfmonObjectRowChangeEvent : EventArgs {
            
            private PerfmonObjectRow eventRow;
            
            private DataRowAction eventAction;
            
            public PerfmonObjectRowChangeEvent(PerfmonObjectRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public PerfmonObjectRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class PerfmonCounterDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnenabled;
            
            private DataColumn columnname;
            
            private DataColumn columnPerfmonObject_Id;
            
            internal PerfmonCounterDataTable() : 
                    base("PerfmonCounter") {
                this.InitClass();
            }
            
            internal PerfmonCounterDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn enabledColumn {
                get {
                    return this.columnenabled;
                }
            }
            
            internal DataColumn nameColumn {
                get {
                    return this.columnname;
                }
            }
            
            internal DataColumn PerfmonObject_IdColumn {
                get {
                    return this.columnPerfmonObject_Id;
                }
            }
            
            public PerfmonCounterRow this[int index] {
                get {
                    return ((PerfmonCounterRow)(this.Rows[index]));
                }
            }
            
            public event PerfmonCounterRowChangeEventHandler PerfmonCounterRowChanged;
            
            public event PerfmonCounterRowChangeEventHandler PerfmonCounterRowChanging;
            
            public event PerfmonCounterRowChangeEventHandler PerfmonCounterRowDeleted;
            
            public event PerfmonCounterRowChangeEventHandler PerfmonCounterRowDeleting;
            
            public void AddPerfmonCounterRow(PerfmonCounterRow row) {
                this.Rows.Add(row);
            }
            
            public PerfmonCounterRow AddPerfmonCounterRow(bool enabled, string name, PerfmonObjectRow parentPerfmonObjectRowByPerfmonObject_PerfmonCounter) {
                PerfmonCounterRow rowPerfmonCounterRow = ((PerfmonCounterRow)(this.NewRow()));
                rowPerfmonCounterRow.ItemArray = new object[] {
                        enabled,
                        name,
                        parentPerfmonObjectRowByPerfmonObject_PerfmonCounter[2]};
                this.Rows.Add(rowPerfmonCounterRow);
                return rowPerfmonCounterRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                PerfmonCounterDataTable cln = ((PerfmonCounterDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new PerfmonCounterDataTable();
            }
            
            internal void InitVars() {
                this.columnenabled = this.Columns["enabled"];
                this.columnname = this.Columns["name"];
                this.columnPerfmonObject_Id = this.Columns["PerfmonObject_Id"];
            }
            
            private void InitClass() {
                this.columnenabled = new DataColumn("enabled", typeof(bool), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnenabled);
                this.columnname = new DataColumn("name", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnname);
                this.columnPerfmonObject_Id = new DataColumn("PerfmonObject_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnPerfmonObject_Id);
                this.columnenabled.Namespace = "";
                this.columnname.Namespace = "";
            }
            
            public PerfmonCounterRow NewPerfmonCounterRow() {
                return ((PerfmonCounterRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new PerfmonCounterRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(PerfmonCounterRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PerfmonCounterRowChanged != null)) {
                    this.PerfmonCounterRowChanged(this, new PerfmonCounterRowChangeEvent(((PerfmonCounterRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PerfmonCounterRowChanging != null)) {
                    this.PerfmonCounterRowChanging(this, new PerfmonCounterRowChangeEvent(((PerfmonCounterRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PerfmonCounterRowDeleted != null)) {
                    this.PerfmonCounterRowDeleted(this, new PerfmonCounterRowChangeEvent(((PerfmonCounterRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PerfmonCounterRowDeleting != null)) {
                    this.PerfmonCounterRowDeleting(this, new PerfmonCounterRowChangeEvent(((PerfmonCounterRow)(e.Row)), e.Action));
                }
            }
            
            public void RemovePerfmonCounterRow(PerfmonCounterRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class PerfmonCounterRow : DataRow {
            
            private PerfmonCounterDataTable tablePerfmonCounter;
            
            internal PerfmonCounterRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tablePerfmonCounter = ((PerfmonCounterDataTable)(this.Table));
            }
            
            public bool enabled {
                get {
                    try {
                        return ((bool)(this[this.tablePerfmonCounter.enabledColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePerfmonCounter.enabledColumn] = value;
                }
            }
            
            public string name {
                get {
                    try {
                        return ((string)(this[this.tablePerfmonCounter.nameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePerfmonCounter.nameColumn] = value;
                }
            }
            
            public PerfmonObjectRow PerfmonObjectRow {
                get {
                    return ((PerfmonObjectRow)(this.GetParentRow(this.Table.ParentRelations["PerfmonObject_PerfmonCounter"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["PerfmonObject_PerfmonCounter"]);
                }
            }
            
            public bool IsenabledNull() {
                return this.IsNull(this.tablePerfmonCounter.enabledColumn);
            }
            
            public void SetenabledNull() {
                this[this.tablePerfmonCounter.enabledColumn] = System.Convert.DBNull;
            }
            
            public bool IsnameNull() {
                return this.IsNull(this.tablePerfmonCounter.nameColumn);
            }
            
            public void SetnameNull() {
                this[this.tablePerfmonCounter.nameColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class PerfmonCounterRowChangeEvent : EventArgs {
            
            private PerfmonCounterRow eventRow;
            
            private DataRowAction eventAction;
            
            public PerfmonCounterRowChangeEvent(PerfmonCounterRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public PerfmonCounterRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
